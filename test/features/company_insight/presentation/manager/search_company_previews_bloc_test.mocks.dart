// Mocks generated by Mockito 5.4.4 from annotations
// in company_insight_app/test/features/company_insight/presentation/manager/search_company_previews_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:company_insight_app/core/resources/data_source.dart' as _i3;
import 'package:company_insight_app/features/company_insight/domain/entities/company_overview.dart'
    as _i6;
import 'package:company_insight_app/features/company_insight/domain/repositories/company_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'search_company_previews_bloc_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCompanyRepository_0 extends _i1.SmartFake
    implements _i2.CompanyRepository {
  _FakeCompanyRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchCompanyPreviewsUseCaseTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCompanyPreviewsUseCaseTest extends _i1.Mock
    implements _i4.SearchCompanyPreviewsUseCaseTest {
  MockSearchCompanyPreviewsUseCaseTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CompanyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCompanyRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CompanyRepository);

  @override
  _i5.Future<_i3.DataState<List<_i6.CompanyPreviewEntity>>> call({
    required String? query,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #query: query,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.DataState<List<_i6.CompanyPreviewEntity>>>.value(
                _FakeDataState_1<List<_i6.CompanyPreviewEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #query: query,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.DataState<List<_i6.CompanyPreviewEntity>>>);
}
